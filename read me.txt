Purpose and Overview
The HTML document is a design of a webpage as a blog interface. It utilizes Bootstrap 5.3 for responsiveness and styling to give it a modern look with consistency in all devices. It contains sections of recent blog posts, all blog posts, and pagination with a toggle for light/dark mode.

Main Elements
Header and Navigation:

A navigation bar is included in the form of <nav> that has links to sections such as Blog, Projects, About, and Newsletter.
Includes a dark mode toggle with a sun and moon icon.
The brand name ("Aman Vyas") is displayed on the top and linked to the homepage.
Blog Section:

Recent Blog Posts:
In two-column layout using the Bootstrap grid system.
Each card includes:
An image.
Author, date, title, and description of the blog post.
Tags represented as badges (e.g., Design, Research).
All Blog Posts:
In three-column layout, displaying other blog posts.
The cards are visually consistent with the cards in the new blog section.
Pagination:
The system includes pagination for navigation across multiple pages of a blog.
Links to the previous, next, and a certain page with an ellipsis sign for more pages
Footer:
The footer features links to social media networks like Twitter, LinkedIn, and an RSS feed
Copyright text: Simple version - 2023.

It makes use of a <div> container with a <input> element to toggle light and dark themes, linking functionality to an external script (nightmode.js).
Benefits
Responsive Design: Leverages Bootstrap's grid system for flexibility and consistency.
Modern UI Features:
Badge usage to classify content ("Research," "Design").
Dark mode toggle improves the user experience.
Content Organization:
Recent and All Blog Posts are clearly differentiated.
Pagination makes it easy to navigate.
Social Media Integration: Footer links enhance discoverability and connectivity.
---------------------------------------------------------------------------------------------------------
CSS Code: Light and Dark Theme Implementation
The CSS styles provided can enable both light and dark themes on a webpage. These two styles have different colours, typography, and design-specific implementations. The following toggle button is enabled via JavaScript, which dynamically enables switching styles based on either a light-theme or a dark-theme class assigned to the body.

Main Options
Light Theme Default
Default background colors are all light.
Text and text elements on navigation links become dark colored (#212529, #333).
Simple, minimalist card designs without prominent borders or shadows.
Clean and soft color palette for badges and other components.
Dark Theme Enhancements
This sets the body background to a dark shade (#090D20).
It adapts text, links, and UI elements to be light or white to ensure better readability.
Interactive elements updated to include:
Cards: It styles with dark backgrounds and white text.
Pagination: It is styled with white text and no borders.
Social Links: It makes use of light text on dark backgrounds to make the text readable.
Navbar: Preserves the dark background and light text color scheme.
Typography:

A single font family, Arial, Helvetica, sans-serif, for all elements.
Custom scaling for some elements:
.the-blog1 employs an extremely large font size of 200px to make a dramatic heading for the blog section.
Interactive elements have smooth transitions (e.g.,.nav-link hover states).
Layout and Spacing:

Flexbox is used throughout to generate flexible, responsive layouts:
.grid-box makes sure that cards are neatly aligned.
.card-content maintains a horizontal layout for images and text.
Cards
 Cards are structured to be responsive and occupy the available width and height.
Badges
 All badges are color coded on categories like Design, Research, and Leadership.
 It has rounded corners.
Transitions and Animations
All interactive elements like hover on navigation links have minimal animation.
Strengths
 Dark Mode Readiness
In the implementation of dark mode, all critical UI components have been covered.
Ensuring readability and accessibility, colors for background and text were carefully contrasted.
Consistency:

Unified styling ensures a uniform look between the light and dark themes
Shared base layout properties are used (padding, border-radius, etc.) that maintain the consistency of designs
Flexibility

Make use of modular classes, which allows for reusable pieces (for example, badge-b-11, badge-b-12).
Card and grid-based designs responsive and adaptive to different screens.
Scalability:

Extends very easily towards new components or themes; just add styles to their theme-specific classes (for example, body.light-theme, body.dark-theme).


---------------------------------------------------------------------------------------------------------
JavaScript Code: Dark Mode Toggle
Implementation Goal and Summary
This piece of JavaScript code adds dark mode toggle functionality to the webpage. It will not allow the user's preference on theme to be lost at a session level, using local storage. The script makes dynamic changes between light and dark themes by adding/removing the respective CSS class from the <body>.

Main Elements
Initialization:
Script waits for the DOM being loaded completely with DOMContentLoaded.
Fetches the theme chosen previously from local storage, using localStorage.getItem("theme").
Defaults to "light-theme" if there is no saved theme.
Applies the saved theme by adding the appropriate class either light-theme or dark-theme to the <body>.
Switch Toggle Behaviour:
It will listen to the change event on the checkbox element named darkModeToggle.
Upon toggle;
It will add the class dark-theme along with remove the class light-theme if switch is turned ON
Add the class light-theme along with remove the dark-theme class if the switch is turned OFF
This selected theme is saved to localStorage to persist.
Dynamic Theme Application:

Updates the state of the toggle switch (checked) based on the current theme stored in localStorage.
Benefits
Persistence:

The script remembers the user's theme preference by using localStorage. So, even after page reloads or browser restarts, the user will experience the same thing.
User-Friendly:

The state of the toggle switch (checked) is automatically set according to the saved theme so that there is no confusion.
Separation of Concerns:

The logic of managing themes is centralized and kept clean from the HTML and CSS.
Event-Driven:

Uses event listeners properly to manage user interaction without DOM manipulations.